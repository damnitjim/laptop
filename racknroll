#!/usr/bin/env ruby

# This is Mark's version of the Thoughtbot laptop script. I've
# transformed this into ruby in order to support yaml config files
# for user customizations.
#
# TODO List
#
# 1. Deal with the problem of shell continuity - esp. with Gem and Nvm commands
# 2. Clean up the code to better document what's happening and how to customize
# 3. Manage brew dependencies and updates better. This would speed up the script
#    significantly

require 'yaml'
require 'english'

def fancy_echo(msg)
  puts "\n\n#{msg}"
end

def append_to_zshrc(text, skip_new_line = false)
  if File.exist?("#{ENV["HOME"]}/.zshrc.local")
    zshrc = "#{ENV["HOME"]}/.zshrc.local"
  else
    zshrc = "#{ENV["HOME"]}/.zshrc"
  end

  return if File.read(zshrc).include?(text)
  File.write(zshrc, "#{"\n" if skip_new_line}#{text}\n", File.size(zshrc))
end

Dir.mkdir("#{ENV["HOME"]}/.bin") unless File.directory?("#{ENV["HOME"]}/.bin/")

FileUtils.touch "#{ENV["HOME"]}/.zshrc" unless File.file?("#{ENV["HOME"]}/.zshrc")

append_to_zshrc 'export PATH="#{ENV["HOME"]}/.bin:$PATH"'

# TODO: change this later after installing the brew version - reference the
# brew version of zsh instead of the built-in.
unless ENV["SHELL"] =~ /\/zsh/
  fancy_echo "Changing your shell to zsh ..."
  `chsh -s $(which zsh)`
end

def brew_install_or_upgrade(formula)
  if brew_is_installed formula
    `brew upgrade #{formula}` if brew_is_upgradable(formula)
  else
    `brew install #{formula}`
  end
end

def brew_is_installed(formula)
  name = brew_expand_alias(formula)

  `brew list -1`.split("\n").any? { |l| l == name }
end

def brew_is_upgradable(formula)
  name = brew_expand_alias(formula)

  `brew outdated --quiet #{name} >/dev/null`
  $CHILD_STATUS.exitstatus != 0
end

def brew_expand_alias(formula)
  `brew info "#{formula}" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'`.strip
end

def ensure_directory(parts)
  path = ""
  parts.each do |part|
    path = File.join(path, part)
    Dir.mkdir path unless File.directory?(path)
  end
end

def latest_mri
  versions = `ruby-build --definitions`
  versions.split("\n").select { |v| v.match(/^\d+\.\d+\.\d+(-p\d+)?$/) }.sort.last
end

def rbenv_version_installed(ruby_version)
  versions = `rbenv versions --bare`.split("\n")
  versions.include?(ruby_version)
end

def brew_launchctl_restart(formula)
  name = brew_expand_alias(formula)
  domain = "homebrew.mxcl.#{name}"
  plist = "#{domain}.plist"

  ensure_directory([ENV["HOME"], "Library", "LaunchAgents"])
  source_plist = "/usr/local/opt/#{name}/#{plist}"
  target_plist = "#{ENV["HOME"]}/Library/LaunchAgents/#{plist}"
  File.symlink(source_plist, target_plist) unless File.exist?(target_plist)

  `launchctl list | grep -q #{domain}`
  `launchctl unload ~/Library/LaunchAgents/#{plist} >/dev/null` if $CHILD_STATUS.exitstatus == 0
  `launchctl load ~/Library/LaunchAgents/#{plist} >/dev/null`
end

`command -v brew >/dev/null`
if $CHILD_STATUS.exitstatus != 0
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
  `ruby <(curl -fsS https://raw.githubusercontent.com/Homebrew/install/master/install)`

  append_to_zshrc '# recommended by brew doctor'
  append_to_zshrc 'export PATH="/usr/local/bin:$PATH"', 1
  `export PATH="/usr/local/bin:$PATH"`
else
  fancy_echo "Homebrew already installed. Skipping ..."
end

fancy_echo "Updating Homebrew formulas ..."
`brew update`

# TODO: read the list of brew packages from standard, team, and user set
fancy_echo "Installing Postgres, a good open source relational database ..."
brew_install_or_upgrade 'postgres'

fancy_echo "Installing Redis, a good key-value database ..."
brew_install_or_upgrade 'redis'

fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
brew_install_or_upgrade 'the_silver_searcher'

fancy_echo "Installing vim from Homebrew to get the latest version ..."
brew_install_or_upgrade 'vim'

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
brew_install_or_upgrade 'ctags'

fancy_echo "Installing tmux, to save project state and switch between projects ..."
brew_install_or_upgrade 'tmux'

fancy_echo "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
brew_install_or_upgrade 'reattach-to-user-namespace'

fancy_echo "Installing ImageMagick, to crop and resize images ..."
brew_install_or_upgrade 'imagemagick'

fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
brew_install_or_upgrade 'qt'

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
brew_install_or_upgrade 'watch'

fancy_echo "Installing GitHub CLI client ..."
brew_install_or_upgrade 'gh'

# Node stuff starts here
node_version = "0.10"

fancy_echo "Installing NVM, Node.js, and NPM, for running apps and installing JavaScript packages ..."
brew_install_or_upgrade 'nvm'

append_to_zshrc 'export PATH="$PATH:/usr/local/lib/node_modules"'
append_to_zshrc 'source $(brew --prefix nvm)/nvm.sh', 1

# TODO: Here's where things go astray - didn't seem to work first time
# Ah - the problem is that each back tick shell is unique and it's not
# happening in the following zsh
nvm_prefix = `brew --prefix nvm`.strip
# TODO: This doesn't work with back ticks
nvm_cmds = [
  "source #{nvm_prefix}/nvm.sh",
  "nvm install \"#{node_version}\"",
  "nvm alias default \"#{node_version}\""]
fancy_echo "Setting #{node_version} as the global default nodejs..."
result = system(nvm_cmds.join("\n"))
# TODO: fail on false result

# TODO: Make this a section of additional initialization steps for brew libraries
fancy_echo "Starting Postgres ..."
brew_launchctl_restart "postgresql"

unless Dir.exist?("#{ENV["HOME"]}/.rbenv")
  fancy_echo "Installing rbenv, to change Ruby versions ..."
  brew_install_or_upgrade 'rbenv'

  append_to_zshrc 'export PATH="#{ENV["HOME"]}/.rbenv/bin:$PATH"'
  append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"', 1

  `export PATH = "#{ENV["HOME"]}/.rbenv/bin:$PATH"`
  `eval "$(rbenv init - zsh)"`
end

unless Dir.exist?("#{ENV["HOME"]}/.rbenv/plugins/rbenv-gem-rehash")
  fancy_echo("Installing rbenv-gem-rehash so the shell automatically picks up" \
             " binaries after installing gems with binaries...")
  brew_install_or_upgrade 'rbenv-gem-rehash'
end

unless Dir.exist?("#{ENV["HOME"]}/.rbenv/plugins/ruby-build")
  fancy_echo "Installing ruby-build, to install Rubies ..."
  brew_install_or_upgrade 'ruby-build'
end

ruby_version = latest_mri

unless rbenv_version_installed(ruby_version)
  fancy_echo "Installing Ruby $ruby_version ..."
  `rbenv install -s "#{ruby_version}"`
end

fancy_echo "Setting #{ruby_version} as global default Ruby ..."
`rbenv global "#{ruby_version}"`
`rbenv rehash`

fancy_echo "Updating to latest Rubygems version ..."
`gem update --system`

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
`gem install bundler --pre`

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
number_of_cores = `sysctl -n hw.ncpu`.strip.to_i
`bundle config --global jobs #{number_of_cores - 1}`

fancy_echo "Installing your personal additions from ~/.laptop.local ..."

# TODO: Replace this with a better extension mechanism
`source ~/.laptop.local` if File.file?("#{ENV["HOME"]}/.laptop.local")
